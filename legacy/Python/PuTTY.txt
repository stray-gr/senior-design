NOTES: 
- Directly pasting source code caused issues no matter what
- Pasting base64 encoded text only caused issues with the linux CLI
- The windows telnet CLI is to be completely avoided

Bash:
base64 file.ext

PuTTY:
Connect to localhost port 4000 using telnet
>>> import machine
>>> from binascii import a2b_base64 as from_b64
>>> x = """<paste the base64 encoded text of file.ext>"""
>>> with open('file.ext', 'wb') as f:
...     f.write(from_b64(x))
...
...
...
>>> with open('file.ext', 'r') as f:
...     print(f.read())
...
...
...
>>> machine.reset() 


BEGIN ENCODING FOR main.py
ZnJvbSB1Z2l0IGltcG9ydCBwdWxsX2FsbApmcm9tIHV0aW1lIGltcG9ydCBzbGVlcAppbXBvcnQg
bmV0d29yawppbXBvcnQgb3MKCnByaW50KCJDb25uZWN0aW5nIHRvIFdpRmkiLCBlbmQ9IiIpCnN0
YV9pZiA9IG5ldHdvcmsuV0xBTihuZXR3b3JrLlNUQV9JRikKc3RhX2lmLmFjdGl2ZShUcnVlKQpz
dGFfaWYuY29ubmVjdCgnV29rd2ktR1VFU1QnLCAnJykKd2hpbGUgbm90IHN0YV9pZi5pc2Nvbm5l
Y3RlZCgpOgogICAgcHJpbnQoIi4iLCBlbmQ9IiIpCiAgICBzbGVlcCgwLjUpCnByaW50KCIgQ29u
bmVjdGVkISIpCgpwcmludChvcy5saXN0ZGlyKCkpCnB1bGxfYWxsKGlzY29ubmVjdGVkPVRydWUp
CnByaW50KG9zLmxpc3RkaXIoKSkKCndoaWxlIFRydWU6CiAgICBzbGVlcCgxKQo=
END ENCODING

BEGIN ENCODING FOR ugit.py
IyB1Z2l0CiMgbWljcm9weXRob24gT1RBIHVwZGF0ZSBmcm9tIGdpdGh1YgojIENyZWF0ZWQgYnkg
VFVSRlBUQXggZm9yIHRoZSBvcGVubXVzY2xlIHByb2plY3QKIyBDaGVjayBvdXQgaHR0cHM6Ly9v
cGVubXVzY2xlLm9yZyBmb3IgbW9yZSBpbmZvCiMKIyBQdWxscyBmaWxlcyBhbmQgZm9sZGVycyBm
cm9tIG9wZW4gZ2l0aHViIHJlcG9zaXRvcnkKCiMgTk9URSBUaGlzIGlzIEdQTCB2MyBjb2RlCiMg
VE9ETyBMb29rIGludG8gaG93IHVzaW5nIHRoaXMgYWZmZWN0cyB5b3VyIHByb2plY3QgKG1heSBu
ZWVkIHRvIEdQTCB2MyBpdCBhcyB3ZWxsKQojIFRPRE8gU3VibWl0IGEgcHVsbCByZXF1ZXN0IGlm
IHRoZSBvbGQgdmVyc2lvbiByZWFsbHkgaXMgY2F1c2luZyBpc3N1ZXMKCmltcG9ydCBvcwppbXBv
cnQgdXJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCBoYXNobGliCmltcG9ydCBiaW5hc2NpaQpp
bXBvcnQgbWFjaGluZQppbXBvcnQgdGltZQppbXBvcnQgbmV0d29yawoKZ2xvYmFsIGludGVybmFs
X3RyZWUKCiMjIyMgLS0tLS0tLS0tLS0tLVVzZXIgVmFyaWFibGVzLS0tLS0tLS0tLS0tLS0tLSMj
IyMKIyMjIyAKIyBEZWZhdWx0IE5ldHdvcmsgdG8gY29ubmVjdCB1c2luZyB3aWZpY29ubmVjdCgp
CnNzaWQgPSAnV29rd2ktR1VFU1QnCnBhc3N3b3JkID0gJycKCiMgQ0hBTkdFIFRPIFlPVVIgUkVQ
T1NJVE9SWSBJTkZPCiMgUmVwb3NpdG9yeSBtdXN0IGJlIHB1YmxpYyBpZiBubyBwZXJzb25hbCBh
Y2Nlc3MgdG9rZW4gaXMgc3VwcGxpZWQKdXNlciA9ICd0dXJmcHRheCcKcmVwb3NpdG9yeSA9ICd1
Z2l0X3Rlc3QnCnRva2VuID0gJycKIyBDaGFuZ2UgdGhpcyB2YXJpYWJsZSB0byAnbWFzdGVyJyBv
ciBhbnkgb3RoZXIgbmFtZSBtYXRjaGluZyB5b3VyIGRlZmF1bHQgYnJhbmNoCmRlZmF1bHRfYnJh
bmNoID0gJ21haW4nCgojIERvbid0IHJlbW92ZSB1Z2l0LnB5IGZyb20gdGhlIGlnbm9yZV9maWxl
cyB1bmxlc3MgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nIDpECiMgUHV0IHRoZSBmaWxlcyB5
b3UgZG9uJ3Qgd2FudCBkZWxldGVkIG9yIHVwZGF0ZWQgaGVyZSB1c2UgJy9maWxlbmFtZS5leHQn
Cmlnbm9yZV9maWxlcyA9IFsnL3VnaXQucHknXQppZ25vcmUgPSBpZ25vcmVfZmlsZXMKIyMjIC0t
LS0tLS0tLS0tRU5EIE9GIFVTRVIgVkFSSUFCTEVTIC0tLS0tLS0tLS0jIyMjCgojIFN0YXRpYyBV
UkxTCiMgR2l0SHViIHVzZXMgJ21haW4nIGluc3RlYWQgb2YgbWFzdGVyIGZvciBweXRob24gcmVw
b3NpdG9yeSB0cmVlcwpnaXR1cmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL3t1c2VyfS97cmVwb3Np
dG9yeX0nCmNhbGxfdHJlZXNfdXJsID0gZidodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL3t1
c2VyfS97cmVwb3NpdG9yeX0vZ2l0L3RyZWVzL3tkZWZhdWx0X2JyYW5jaH0/cmVjdXJzaXZlPTEn
CnJhdyA9IGYnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3t1c2VyfS97cmVwb3Np
dG9yeX0vbWFzdGVyLycKCmRlZiBwdWxsKGZfcGF0aCxyYXdfdXJsKToKICBwcmludChmJ3B1bGxp
bmcge2ZfcGF0aH0gZnJvbSBnaXRodWInKQogICNmaWxlcyA9IG9zLmxpc3RkaXIoKQogIGhlYWRl
cnMgPSB7J1VzZXItQWdlbnQnOiAndWdpdC10dXJmcHRheCd9IAogICMgXl5eIEdpdGh1YiBSZXF1
aXJlcyB1c2VyLWFnZW50IGhlYWRlciBvdGhlcndpc2UgNDAzCiAgaWYgbGVuKHRva2VuKSA+IDA6
CiAgICAgIGhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXSA9ICJiZWFyZXIgJXMiICUgdG9rZW4gCiAg
ciA9IHVyZXF1ZXN0cy5nZXQocmF3X3VybCwgaGVhZGVycz1oZWFkZXJzKQogIHRyeToKICAgIG5l
d19maWxlID0gb3BlbihmX3BhdGgsICd3JykKICAgIG5ld19maWxlLndyaXRlKHIuY29udGVudC5k
ZWNvZGUoJ3V0Zi04JykpCiAgICBuZXdfZmlsZS5jbG9zZSgpCiAgZXhjZXB0OgogICAgcHJpbnQo
J2RlY29kZSBmYWlsIHRyeSBhZGRpbmcgbm9uLWNvZGUgZmlsZXMgdG8gLmdpdGlnbm9yZScpCiAg
ICB0cnk6CiAgICAgIG5ld19maWxlLmNsb3NlKCkKICAgIGV4Y2VwdDoKICAgICAgcHJpbnQoJ3Ry
aWVkIHRvIGNsb3NlIG5ld19maWxlIHRvIHNhdmUgbWVtb3J5IGR1cnJpbmcgcmF3IGZpbGUgZGVj
b2RlJykKICAKZGVmIHB1bGxfYWxsKHRyZWU9Y2FsbF90cmVlc191cmwscmF3ID0gcmF3LGlnbm9y
ZSA9IGlnbm9yZSxpc2Nvbm5lY3RlZD1GYWxzZSk6CiAgaWYgbm90IGlzY29ubmVjdGVkOgogICAg
ICB3bGFuID0gd2lmaWNvbm5lY3QoKSAKICBvcy5jaGRpcignLycpCiAgdHJlZSA9IHB1bGxfZ2l0
X3RyZWUoKQogIGludGVybmFsX3RyZWUgPSBidWlsZF9pbnRlcm5hbF90cmVlKCkKICBpbnRlcm5h
bF90cmVlID0gcmVtb3ZlX2lnbm9yZShpbnRlcm5hbF90cmVlKQogIHByaW50KCcgaWdub3JlIHJl
bW92ZWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCiAgcHJpbnQoaW50ZXJuYWxfdHJlZSkKICBs
b2cgPSBbXQogICMgZG93bmxvYWQgYW5kIHNhdmUgYWxsIGZpbGVzCiAgZm9yIGkgaW4gdHJlZVsn
dHJlZSddOgogICAgaWYgaVsndHlwZSddID09ICd0cmVlJzoKICAgICAgdHJ5OgogICAgICAgIG9z
Lm1rZGlyKGlbJ3BhdGgnXSkKICAgICAgZXhjZXB0OgogICAgICAgIHByaW50KGYnZmFpbGVkIHRv
IHtpWyJwYXRoIl19IGRpciBtYXkgYWxyZWFkeSBleGlzdCcpCiAgICBlbGlmIGlbJ3BhdGgnXSBu
b3QgaW4gaWdub3JlOgogICAgICB0cnk6CiAgICAgICAgb3MucmVtb3ZlKGlbJ3BhdGgnXSkKICAg
ICAgICBsb2cuYXBwZW5kKGYne2lbInBhdGgiXX0gZmlsZSByZW1vdmVkIGZyb20gaW50IG1lbScp
CiAgICAgICAgaW50ZXJuYWxfdHJlZSA9IHJlbW92ZV9pdGVtKGlbJ3BhdGgnXSxpbnRlcm5hbF90
cmVlKQogICAgICBleGNlcHQ6CiAgICAgICAgbG9nLmFwcGVuZChmJ3tpWyJwYXRoIl19IGRlbCBm
YWlsZWQgZnJvbSBpbnQgbWVtJykKICAgICAgICBwcmludCgnZmFpbGVkIHRvIGRlbGV0ZSBvbGQg
ZmlsZScpCiAgICAgIHRyeToKICAgICAgICBwdWxsKGlbJ3BhdGgnXSxyYXcgKyBpWydwYXRoJ10p
CiAgICAgICAgbG9nLmFwcGVuZChpWydwYXRoJ10gKyAnIHVwZGF0ZWQnKQogICAgICBleGNlcHQ6
CiAgICAgICAgbG9nLmFwcGVuZChpWydwYXRoJ10gKyAnIGZhaWxlZCB0byBwdWxsJykKICAjIGRl
bGV0ZSBmaWxlcyBub3QgaW4gR2l0aHViIHRyZWUKICBpZiBsZW4oaW50ZXJuYWxfdHJlZSkgPiAw
OgogICAgICBwcmludChpbnRlcm5hbF90cmVlLCAnIGxlZnRvdmVyIScpCiAgICAgIGZvciBpIGlu
IGludGVybmFsX3RyZWU6CiAgICAgICAgICBvcy5yZW1vdmUoaSkKICAgICAgICAgIGxvZy5hcHBl
bmQoaSArICcgcmVtb3ZlZCBmcm9tIGludCBtZW0nKQogIGxvZ2ZpbGUgPSBvcGVuKCd1Z2l0X2xv
Zy5weScsJ3cnKQogIGxvZ2ZpbGUud3JpdGUoc3RyKGxvZykpCiAgbG9nZmlsZS5jbG9zZSgpCiAg
dGltZS5zbGVlcCgxMCkKICBwcmludCgncmVzZXR0aW5nIG1hY2hpbmUgaW4gMTA6IG1hY2hpbmUu
cmVzZXQoKScpCiAgbWFjaGluZS5yZXNldCgpCiAgI3JldHVybiBjaGVjayBpbnN0ZWFkIHJldHVy
biB3aXRoIGdsb2JhbAoKZGVmIHdpZmljb25uZWN0KHNzaWQ9c3NpZCxwYXNzd29yZD1wYXNzd29y
ZCk6CiAgICBwcmludCgnVXNlOiBsaWtlIHVnaXQud2lmaWNvbm5lY3QoU1NJRCxQYXNzd29yZCkn
KQogICAgcHJpbnQoJ290aGVyd2lzZSB1c2VzIHNzaWQscGFzc3dvcmQgaW4gdG9wIG9mIHVnaXQu
cHkgY29kZScpCiAgICB3bGFuID0gbmV0d29yay5XTEFOKG5ldHdvcmsuU1RBX0lGKQogICAgd2xh
bi5hY3RpdmUoRmFsc2UpCiAgICB3bGFuLmFjdGl2ZShUcnVlKQogICAgd2xhbi5jb25uZWN0KHNz
aWQscGFzc3dvcmQpCiAgICB3aGlsZSBub3Qgd2xhbi5pc2Nvbm5lY3RlZCgpOgogICAgICAgIHBh
c3MKICAgIHByaW50KCdXaWZpIENvbm5lY3RlZCEhJykKICAgIHByaW50KGYnU1NJRDoge3NzaWR9
JykKICAgIHByaW50KCdMb2NhbCBJcCBBZGRyZXNzLCBTdWJuZXQgTWFzaywgRGVmYXVsdCBHYXRl
d2F5LCBMaXN0ZW5pbmcgb24uLi4nKQogICAgcHJpbnQod2xhbi5pZmNvbmZpZygpKQogICAgcmV0
dXJuIHdsYW4KICAKIyBUT0RPIEltcHJvdmUgaWxpc3RkaXIgaGFuZGxpbmcgKHBhdHRlcm4gbWF0
Y2ggdGhlIDQtdHVwbGUpCmRlZiBidWlsZF9pbnRlcm5hbF90cmVlKCk6CiAgZ2xvYmFsIGludGVy
bmFsX3RyZWUKICBpbnRlcm5hbF90cmVlID0gW10KICBvcy5jaGRpcignLycpCiAgZm9yIGkgaW4g
b3MuaWxpc3RkaXIoKToKICAgIGFkZF90b190cmVlKGkpCiAgcmV0dXJuKGludGVybmFsX3RyZWUp
CgpkZWYgYWRkX3RvX3RyZWUoZGlyX2l0ZW0pOgogIGdsb2JhbCBpbnRlcm5hbF90cmVlCiAgaWYg
aXNfZGlyZWN0b3J5KGRpcl9pdGVtKSBhbmQgbGVuKG9zLmxpc3RkaXIoZGlyX2l0ZW0pKSA+PSAx
OgogICAgb3MuY2hkaXIoZGlyX2l0ZW0pCiAgICBmb3IgaSBpbiBvcy5pbGlzdGRpcigpOgogICAg
ICBhZGRfdG9fdHJlZShpKQogICAgb3MuY2hkaXIoJy4uJykKICBlbHNlOgogICAgcHJpbnQoZGly
X2l0ZW0pCiAgICBpZiBvcy5nZXRjd2QoKSAhPSAnLyc6CiAgICAgIHN1YmZpbGVfcGF0aCA9IG9z
LmdldGN3ZCgpICsgJy8nICsgZGlyX2l0ZW1bMF0KICAgIGVsc2U6CiAgICAgIHN1YmZpbGVfcGF0
aCA9IG9zLmdldGN3ZCgpICsgZGlyX2l0ZW1bMF0KICAgIHRyeToKICAgICAgcHJpbnQoZidzdWJf
cGF0aDoge3N1YmZpbGVfcGF0aH0nKQogICAgICBpbnRlcm5hbF90cmVlLmFwcGVuZChbc3ViZmls
ZV9wYXRoLGdldF9oYXNoKHN1YmZpbGVfcGF0aCldKQogICAgZXhjZXB0IE9TRXJyb3I6ICMgdHlw
ZTogaWdub3JlICMgZm9yIHJlbW92aW5nIHRoZSB0eXBlIGVycm9yIGluZGljYXRvciA6KQogICAg
ICBwcmludChmJ3tkaXJfaXRlbX0gY291bGQgbm90IGJlIGFkZGVkIHRvIHRyZWUnKQoKCmRlZiBn
ZXRfaGFzaChmaWxlKToKICBwcmludChmaWxlKQogIG9fZmlsZSA9IG9wZW4oZmlsZSkKICByX2Zp
bGUgPSBvX2ZpbGUucmVhZCgpCiAgc2hhMW9iaiA9IGhhc2hsaWIuc2hhMShyX2ZpbGUpCiAgaGFz
aCA9IHNoYTFvYmouZGlnZXN0KCkKICByZXR1cm4oYmluYXNjaWkuaGV4bGlmeShoYXNoKSkKCmRl
ZiBnZXRfZGF0YV9oYXNoKGRhdGEpOgogICAgc2hhMW9iaiA9IGhhc2hsaWIuc2hhMShkYXRhKQog
ICAgaGFzaCA9IHNoYTFvYmouZGlnZXN0KCkKICAgIHJldHVybihiaW5hc2NpaS5oZXhsaWZ5KGhh
c2gpKQogIAojIFRPRE8gSW5saW5lIHRoaXM/Pz8KZGVmIGlzX2RpcmVjdG9yeShmaWxlKToKICAg
IHJldHVybiAoZmlsZVsxXSA9PSAweDQwMDApICMgMHg0MDAwIGlzIGRpciwgMHg4MDAwIGlzIGZp
bGUKICAgIApkZWYgcHVsbF9naXRfdHJlZSh0cmVlX3VybD1jYWxsX3RyZWVzX3VybCxyYXcgPSBy
YXcpOgogIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOiAndWdpdC10dXJmcHRheCd9IAogICMgXl5e
IEdpdGh1YiBSZXF1aXJlcyB1c2VyLWFnZW50IGhlYWRlciBvdGhlcndpc2UgNDAzCiAgaWYgbGVu
KHRva2VuKSA+IDA6CiAgICAgIGhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXSA9ICJiZWFyZXIgJXMi
ICUgdG9rZW4gCiAgciA9IHVyZXF1ZXN0cy5nZXQodHJlZV91cmwsaGVhZGVycz1oZWFkZXJzKQog
IGRhdGEgPSBqc29uLmxvYWRzKHIuY29udGVudC5kZWNvZGUoJ3V0Zi04JykpCiAgaWYgJ3RyZWUn
IG5vdCBpbiBkYXRhOgogICAgICBwcmludCgnXG5EZWZhdWx0IGJyYW5jaCAibWFpbiIgbm90IGZv
dW5kLiBTZXQgImRlZmF1bHRfYnJhbmNoIiB2YXJpYWJsZSB0byB5b3VyIGRlZmF1bHQgYnJhbmNo
LlxuJykKICAgICAgcmFpc2UgRXhjZXB0aW9uKGYnRGVmYXVsdCBicmFuY2gge2RlZmF1bHRfYnJh
bmNofSBub3QgZm91bmQuJykgCiAgdHJlZSA9IGpzb24ubG9hZHMoci5jb250ZW50LmRlY29kZSgn
dXRmLTgnKSkKICByZXR1cm4odHJlZSkKICAKZGVmIHBhcnNlX2dpdF90cmVlKCk6CiAgdHJlZSA9
IHB1bGxfZ2l0X3RyZWUoKQogIGRpcnMgPSBbXQogIGZpbGVzID0gW10KICBmb3IgaSBpbiB0cmVl
Wyd0cmVlJ106CiAgICBpZiBpWyd0eXBlJ10gPT0gJ3RyZWUnOgogICAgICBkaXJzLmFwcGVuZChp
WydwYXRoJ10pCiAgICBpZiBpWyd0eXBlJ10gPT0gJ2Jsb2InOgogICAgICBmaWxlcy5hcHBlbmQo
W2lbJ3BhdGgnXSxpWydzaGEnXSxpWydtb2RlJ11dKQogIHByaW50KCdkaXJzOicsZGlycykKICBw
cmludCgnZmlsZXM6JyxmaWxlcykKICAgCiAgIApkZWYgY2hlY2tfaWdub3JlKHRyZWU9Y2FsbF90
cmVlc191cmwscmF3ID0gcmF3LGlnbm9yZSA9IGlnbm9yZSk6CiAgb3MuY2hkaXIoJy8nKQogIHRy
ZWUgPSBwdWxsX2dpdF90cmVlKCkKICBjaGVjayA9IFtdCiAgIyBkb3dubG9hZCBhbmQgc2F2ZSBh
bGwgZmlsZXMKICBmb3IgaSBpbiB0cmVlWyd0cmVlJ106CiAgICBpZiBpWydwYXRoJ10gbm90IGlu
IGlnbm9yZToKICAgICAgICBwcmludChpWydwYXRoJ10gKyAnIG5vdCBpbiBpZ25vcmUnKQogICAg
aWYgaVsncGF0aCddIGluIGlnbm9yZToKICAgICAgICBwcmludChpWydwYXRoJ10rICcgaXMgaW4g
aWdub3JlJykKICAgICAgICAKZGVmIHJlbW92ZV9pZ25vcmUoaW50ZXJuYWxfdHJlZSxpZ25vcmU9
aWdub3JlKToKICAgIGNsZWFuX3RyZWUgPSBbXQogICAgaW50X3RyZWUgPSBbXQogICAgZm9yIGkg
aW4gaW50ZXJuYWxfdHJlZToKICAgICAgICBpbnRfdHJlZS5hcHBlbmQoaVswXSkKICAgIGZvciBp
IGluIGludF90cmVlOgogICAgICAgIGlmIGkgbm90IGluIGlnbm9yZToKICAgICAgICAgICAgY2xl
YW5fdHJlZS5hcHBlbmQoaSkKICAgIHJldHVybihjbGVhbl90cmVlKQogICAgICAgIApkZWYgcmVt
b3ZlX2l0ZW0oaXRlbSx0cmVlKToKICAgIGN1bGxlZCA9IFtdCiAgICBmb3IgaSBpbiB0cmVlOgog
ICAgICAgIGlmIGl0ZW0gbm90IGluIGk6CiAgICAgICAgICAgIGN1bGxlZC5hcHBlbmQoaSkKICAg
IHJldHVybihjdWxsZWQpCgpkZWYgdXBkYXRlKCk6CiAgICBwcmludCgndXBkYXRlcyB1Z2l0LnB5
IHRvIG5ld2VzdCB2ZXJzaW9uJykKICAgIHJhd191cmwgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNl
cmNvbnRlbnQuY29tL3R1cmZwdGF4L3VnaXQvbWFzdGVyLycKICAgIHB1bGwoJ3VnaXQucHknLHJh
d191cmwrJ3VnaXQucHknKQoKZGVmIGJhY2t1cCgpOgogICAgaW50X3RyZWUgPSBidWlsZF9pbnRl
cm5hbF90cmVlKCkKICAgIGJhY2t1cF90ZXh0ID0gInVnaXQgQmFja3VwIFZlcnNpb24gMS4wXG5c
biIKICAgIGZvciBpIGluIGludF90cmVlOgogICAgICAgIGRhdGEgPSBvcGVuKGlbMF0sJ3InKQog
ICAgICAgIGJhY2t1cF90ZXh0ICs9IGYnRk46U0hBMXtpWzBdfSx7aVsxXX1cbicKICAgICAgICBi
YWNrdXBfdGV4dCArPSAnLS0tJytkYXRhLnJlYWQoKSsnLS0tXG4nCiAgICAgICAgZGF0YS5jbG9z
ZSgpCiAgICBiYWNrdXAgPSBvcGVuKCd1Z2l0LmJhY2t1cCcsJ3cnKQogICAgYmFja3VwLndyaXRl
KGJhY2t1cF90ZXh0KQogICAgYmFja3VwLmNsb3NlKCkK
END ENCODING